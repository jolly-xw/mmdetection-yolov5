from collections import OrderedDict
from lib2to3.pytree import convert
import logging
import torch
from mmdet.models import YOLOV5
from argparse import ArgumentParser


def parse_args():
    parser = ArgumentParser(description='官方yolov5模型转换成mmdet可读模型')
    parser.add_argument('--official_weghts', default="", help='官方yolov5模型')
    parser.add_argument('--output_path', default="", help='转换后保存的路径')
    parser.add_argument('--yolov5_size', default="s", help='模型大小,n,s,l,m,x')
    parser.add_argument('--datset_type', default='coco', help='数据集类型/类别信息')
    args = parser.parse_args()
    return args


def ori_2_mmdet(args):
    
    # 搭建我的MMDetection模型
    backbone = dict(type='CSPDarknetV5', deepen_factor=0.33, widen_factor=0.5)
    neck = dict(type='YOLOV5Neck', deepen_factor=0.33, widen_factor=0.5)
    head = dict(type='YOLOV5Detect', num_classes=80)
    model = YOLOV5(backbone=backbone, neck=neck, bbox_head=head)
    # 获取我的模型的state dict
    state_dict = model.state_dict()
    # 去读取我的state dict的所有key
    new_state_dict = OrderedDict()  # 准备一个新的state dict 用于存放我的模型的key，value随便放一个None
    # 遍历我的state dict，把key全部存进新的state dict
    for key, _ in state_dict.items():
        new_state_dict[key] = None

    # 官方模型的pt文件路径
    weights_file = 'model_tools/pt_model/ori_missile.pt'
    # 加载官方pt文件
    weight = torch.load(
        weights_file, map_location=torch.device('cpu'))['model']
    ori_model = weight.model
    # 获取官方模型的state dict
    ori_state_dict = ori_model.state_dict()
    # 不去动我的state_dict中的key，去把官方模型的state dict的value赋到我的state_dict中
    # 官方的state dict中是有两个key不需要的：anchors和anchor_grid
    # 去掉不需要的键值对
    ori_state_dict.pop('24.anchors')
    # ori_state_dict.pop('24.anchor_grid') # 只有官方提供的在COCO上的预训练模型才会有anchor_grid这个key
    values = []
    for key, value in ori_state_dict.items():
        values.append(value)

    # 前提：确定模型的组件顺序一定没有问题！
    assert len(ori_state_dict) == len(state_dict)  # 判断是否可以一一对应
    for idx, key_value in enumerate(new_state_dict.items()):
        key = key_value[0]
        new_state_dict[key] = values[idx]

    information = {  # 这里放类别信息
        "CLASSES":
        ('missile')
    }
    data = {"meta": information, "state_dict": new_state_dict}
    logging.info("模型转换成功:original yolov5 -----> mmdet yolov5")
    torch.save(data, 'model_tools/mm_model/ori_missile_mm.pth')


def main():
    args = parse_args()
    ori_2_mmdet(args)


if __name__ == '__main__':
    main()
